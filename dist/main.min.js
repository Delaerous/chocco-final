const validateFields = (form, fildsArray) => {
     
    fildsArray.forEach((field) => {
        field.removeClass("input-error");
        if (field.val().trim() == "") {
            field.addClass("input-error"); 
        }
    });

const errorFields = form.find(".input-error");

return errorFields.length == 0;
}

$("#form").on("submit", function(event) {
    event.preventDefault();
    // openModal();

    const form = $(event.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");
    const modal = $("#modal");
    const content = modal.find(".modal__content");

    modal.removeClass("error-modal");

    const isValid = validateFields(form, [name, phone, comment, to]);
    

if (isValid) {
    const request = $.ajax({
        url: "https://webdev-api.loftschool.com/sendmail",
        method: "post",
        data: {
            name: name.val(),
            phone: phone.val(),
            comment: comment.val(),
            to: to.val(),
        },
    });
    request.done(data =>{
            content.text(data.message);
    });
    request.fail(data => {
        const message = data.responseJSON.message;
            content.text(message);
            modal.addClass("error-modal");
    });

    request.always(() => {
        openModal();
    })
}
});



function openModal(content) {
    $(".modal").addClass("modal-active");
    $("body").addClass("blocked");
    // $.fancybox.open({
    //     src:".modal",
    //     type:"inline"
    // })
}

$(".js-modal--close").click(function(event){
    event.preventDefault();
    $(".modal").removeClass("modal-active");
    $("body").removeClass("blocked");
    // $.fancybox.close();
});let myMap;
const init = () => {
  myMap = new ymaps.Map("map", {
    center: [59.938143, 30.344302],
    zoom: 11,
    controls: [],
  });

  let coords = [
      [59.938143, 30.344302],
      [59.920222, 30.32199],
      [59.942055, 30.381885],
    ],
    myCollection = new ymaps.GeoObjectCollection(
      {},
      {
        draggable: false,
        iconLayout: "default#image",
        iconImageHref: "./img/icons/marker.svg",
        iconImageSize: [46, 57],
        iconImageOffset: [-35, -52],
      }
    );

  for (let i = 0; i < coords.length; i++) {
    myCollection.add(new ymaps.Placemark(coords[i]));
  }

  myMap.geoObjects.add(myCollection);

  myMap.behaviors.disable("scrollZoom");
};

ymaps.ready(init);
;(function () {
    const closeEveryItemInContainer = (container) => {
      const items = container.find(".card-menu__item");
      const content = container.find(".card-menu__content");
  
      items.removeClass("active");
      content.width(0);
    };
  
    const measureWidth = (block) => {
      let itemWidth = 0;
  
      const screenWidth = $(window).width();
      const titlesWidth = block.find(".card-menu__title").width() * 3;
      const textContainer = block.find(".card-menu__container");
      const paddingLeft = parseInt(textContainer.css("padding-left"));
      const paddingRight = parseInt(textContainer.css("padding-right"));
      const isMobile = window.matchMedia("(max-width: 768px)");
    
  
      if (isMobile.matches) {
        itemWidth = screenWidth - titlesWidth
      }
     
      else {
        itemWidth = 500
      }
  
      return {
        container: itemWidth,
        textContainer: itemWidth - paddingLeft - paddingRight
      }
    };
  
    const openItem = (item) => {
      const hiddenBlock = item.find(".card-menu__content");
      const reqWidth = measureWidth(item).container;
      const textBlock = item.find(".card-menu__container");
      const textBlockWidth = measureWidth(item).textContainer;
  
      item.addClass("active");
      hiddenBlock.width(reqWidth);
      textBlock.width(textBlockWidth)
    };
  
    $(".card-menu__title").click((e) => {
      e.preventDefault();
  
      const $this = $(e.currentTarget);
      const item = $this.closest(".card-menu__item");
      const itemOpened = item.hasClass("active");
      const container = $this.closest(".card-menu");
  
      if (itemOpened) {
        closeEveryItemInContainer(container);
      } else {
        closeEveryItemInContainer(container);
        openItem(item);
      }
    });
  
    $(".card-menu__close").click((e) => {
      e.preventDefault();
  
      closeEveryItemInContainer($('.card-menu'));
    });
  }());;const sections = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();

let inScroll = false;

sections.first().addClass("active");

const countSectionPosition = (sectionEq) => {
  const position = sectionEq * -100;

  if (isNaN(position)) {
    console.error("передано не верное значение в countSectionPosition");
    return 0;
  }

  return position;
};

const changeMenuThemeForSection = (sectionEq) => {
  const currentSection = sections.eq(sectionEq);
  const menuTheme = currentSection.attr("data-sidemenu-theme");
  const activeClass = "fixed-menu--shadowed";

  if (menuTheme === "black") {
    sideMenu.addClass(activeClass);
  } else {
    sideMenu.removeClass(activeClass);
  }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
  items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
};

const performTransition = (sectionEq) => {
  if (inScroll) return;

  const transitionOver = 1000;
  const mouseInertiaOver = 300;

  inScroll = true;

  const position = countSectionPosition(sectionEq);

  changeMenuThemeForSection(sectionEq);

  display.css({
    transform: `translateY(${position}%)`,
  });

  resetActiveClassForItem(sections, sectionEq, "active");
  resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");

  setTimeout(() => {
    inScroll = false;
  }, transitionOver + mouseInertiaOver);
};

const viewportScroller = () => {
  const activeSection = sections.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next() {
      if (nextSection.length) {
        performTransition(nextSection.index());
      }
    },
    prev() {
      if (prevSection.length) {
        performTransition(prevSection.index());
      }
    },
  };
};

$(window).on("wheel", (e) => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next();
  }

  if (deltaY < 0) {
    scroller.prev();
  }
});

$(window).on("keydown", (e) => {
  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName === "input" || tagName === "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return;

  switch (e.keyCode) {
    case 38:
      scroller.prev();
      break;

    case 40:
      scroller.next();
      break;
  }
});

$(".wrapper").on("touchmove", (e) => e.preventDefault());

$("[data-scroll-to]").click((e) => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-scroll-to");
  const reqSection = $(`[data-section=${target}]`);

  performTransition(reqSection.index());
});

if (isMobile) {
  // https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
  $("body").swipe({
    swipe: function (event, direction) {
      const scroller = viewportScroller();
      let scrollDirection = "";

      if (direction === "up") scrollDirection = "next";
      if (direction === "down") scrollDirection = "prev";

      scroller[scrollDirection]();
    },
  });
};//Youtube API

// let player;
// let playerContainer = document.querySelector('.player')

// let eventsInit = () =>{
//   let start = document.querySelector('.player__start');

//   start.addEventListener('click', e =>{
//     e.preventDefault();

//     if(playerContainer.classList.contains('player__paused')){
//       // playerContainer.classList.remove('player__paused');

//       player.pauseVideo()
//     } else{
//       // playerContainer.classList.add('player__paused');
//       player.playVideo()
//     }
//   })
// };

//   const playerPlayback = document.querySelector('.player__playback');
//   playerPlayback.addEventListener('click', e =>{
//   const bar = e.currentTarget
//   const clickedPosition = e.layerX;

//   const newButtonPositionPercent = (clickedPosition / bar.width) * 100;
//   const newPlaybackPositionSec = (player.getDuration() / 100) * newButtonPositionPercent;

//   const playerPlaybackButton = document.querySelector('.player__playback-button')
//   playerPlaybackButton.style.left = `${newButtonPositionPercent}%`;
//    player.seekTo(newPlaybackPositionSec)
// })

//   const formatTime = timeSec =>{
//   const roundTime = Math.round(timeSec);

//   const minutes = addZero(Math.floor(roundTime / 60));
//   const seconds = addZero(roundTime - minutes * 60);

//   function addZero(num) {
//   return num < 10 ? `0${num}` : num;
//   }
//   return `${minutes} : ${seconds}`;
// }

// const onPlayerReady = () =>{
//   let interval;

//   const durationSec = player.getDuration();
//   const estimate = document.querySelector('.player__duration-estimate')
//   estimate.innerText = formatTime(durationSec);
//   if(typeof interval !== 'undefined'){
//     clearInterval(interval)
//   }
//   interval = setInterval(() =>{
//     const completedSec = player.getCurrentTime()
//     const completedPercent = (completedSec / durationSec) * 100;

//     const playbackBtn = document.querySelector('.player__playback-button');
//     playbackBtn.style.left = `${completedPercent}%`
//     const completed = document.querySelector('.player__duration-completed');
//     completed.innerText = formatTime(completedSec)
//   },1000)
// }

// const onPlayerStateChange = (event)=>{

//   switch (event.data) {
//     case 1:
//       playerContainer.classList.add('.active')
//       playerContainer.classList.add('player__paused');
//       break;

//     case 2:
//       playerContainer.classList.remove('.active')
//       playerContainer.classList.remove('player__paused');
//       break;
//   }
// }

// function onYouTubeIframeAPIReady() {
//   player = new YT.Player('player', {
//     height: '390',
//     width: '660',
//     videoId: '8iWrEdFIkWs',
//     events: {
//       'onReady': onPlayerReady,
//       'onStateChange': onPlayerStateChange
//     },
//     playerVars: {
//       controls:0,
//       disablekb:0,
//       showinfo:0,
//       rel:0,
//       autoplay:0,
//       modestbranding:0
//     }
//   });
// };
// eventsInit()

///HTML5 API

const playerContainer = document.querySelector(".player");
const player = document.querySelector(".player__video");
const playerWrapperBtn = document.querySelector(".player__play-icon");
const playerWrapper = document.querySelector(".player__wrapper");
const playerStart = document.querySelector(".player__start");
const playerPlaybackBar = document.querySelector(".player__playback");
const progressBar = document.querySelector(".player__playback-line");
const playerPlaybackBtn = document.querySelector(".player__playback-button");
const playerVolumeIcon = document.querySelector(".player__volume-icon");
const playerVolumeBar = document.querySelector(".player__volume");
const playerVolumeBtn = document.querySelector(".player__volume-button");
let startVolume = 0;
let currentVolume;

//Function start
const handleStart = () => {
  if (player.paused) {
    player.play();
    playerWrapperBtn.style.display = "none";
  } else {
    player.pause();
  }
};

playerStart.addEventListener("click", handleStart);
playerWrapper.addEventListener("click", handleStart);

//Ghange play button

player.onplay = () => {
  togglePlayer();
};

player.onpause = () => {
  togglePlayer("pause");
};

const togglePlayer = (action = "start") => {
  action === "start"
    ? playerContainer.classList.add("player-active")
    : playerContainer.classList.remove("player-active");
};

//function ghange volume

const toggleVolume = () => {
  if (player.volume === 0) {
    player.volume = currentVolume;
    playerVolumeBtn.style.left = `${currentVolume * 100}%`;
  } else {
    currentVolume = player.volume;
    player.volume = startVolume;
    playerVolumeBtn.style.left = `${startVolume}%`;
  }
};

const changeVolume = (e) => {
  const currentTarget = e.currentTarget;
  const left = currentTarget.getBoundingClientRect().left;
  const soundBarWidth = parseInt(getComputedStyle(currentTarget).width);
  const newPosition = e.pageX - left;
  const percentValue = (newPosition / soundBarWidth) * 100;
  if (percentValue < 100) {
    playerVolumeBtn.style.left = `${percentValue}%`;
    player.volume = percentValue / 100;
  }
};

playerVolumeIcon.addEventListener("click", toggleVolume);
playerVolumeBar.addEventListener("click", changeVolume);

const handleDuration = (e) => {
  const barWidth = parseInt(getComputedStyle(playerPlaybackBar).width);
  const btnWidth = parseInt(getComputedStyle(playerPlaybackBtn).width);
  const offsetX = e.offsetX;
  const newSize = offsetX + btnWidth / 2;
  const newTime = (newSize * player.duration) / barWidth;
  player.currentTime = newTime;
};

const updateTime = () => {
  let bar = player.currentTime / player.duration;
  progressBar.style.width = `${bar * 100}%`;
  playerPlaybackBtn.style.left = progressBar.style.width = `${bar * 100}%`;

  if (player.ended) {
    player.currentTime = 0;
  }
};

playerPlaybackBar.addEventListener("click", handleDuration);
player.addEventListener("timeupdate", updateTime);
;

const fullMenu = $(".menu__mobile");
const hamburger = $(".hamburger");
const body = $('body');
const link = $('.menu__link');

hamburger.on('click', e => {
  e.preventDefault();
  if ($(fullMenu).hasClass('menu__mobile-active')) {

    $(hamburger).removeClass('hamburger-active');
    $(body).removeClass('body__block');
    $(fullMenu).removeClass('menu__mobile-active')
  } else {
    $(fullMenu).addClass('menu__mobile-active');
    $(hamburger).addClass('hamburger-active');
    $(body).addClass('body__block');
  }
});

link.on('click', (e) => {
  e.preventDefault();
  const curLink = $(e.currentTarget);
  const dataValue = curLink.attr('data-scroll-to');
  scrollToSection(dataValue); 
  if ($("body").hasClass('body__block')) {
    $(hamburger).removeClass('hamburger-active');
    $(body).removeClass('body__block');
    $(fullMenu).removeClass('menu__mobile-active');
  }
})

const scrollToSection = (value) => {
  const elem = document.querySelector(`[data-section=${value}]`);
  window.scroll({
    left: 0,
    top: elem.offsetTop,
    behavior: "smooth"
  });
}
;const slyder = $('.product__list').bxSlider({
    pager : false,
    controls : false
  });
  
  $(".arrow-left").click(e =>{
    e.preventDefault();
  
    slyder.goToPrevSlide();
  
  });
  
  $(".arrow-right").click(e =>{
  
    e.preventDefault();
  
    slyder.goToNextSlide();
  });

  ;const find = (find)=>{
  return $(".reviews__item").filter((ndx, item)=>{
    return $(item).attr("data-linked") === find;
  });
};


$(".interactive-avatar__link").click((e)=>{
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-link");
  const showItem = find(target);
  const currItem = $this.closest(".interactive-avatar");

  showItem.addClass("reviews__item-active").siblings().removeClass("reviews__item-active");
  currItem.addClass("interactive-avatar-active").siblings().removeClass("interactive-avatar-active");
});const openItem = (item) => {
    const container = item.closest(".team__item");
    const contentBlock = container.find(".team__description");
    const textBlock = contentBlock.find(".team__description-block");
    const reqHeight = textBlock.height();
    const arrow = container.find(".team__arrow");

    arrow.addClass("team__arrow_up");
    container.addClass("active");
    contentBlock.height(reqHeight);
};

const closeEveryItem = (container) => {
    const items = container.find(".team__description");
    const itemContainer = container.find(".team__item");
    const arrowUp = container.find(".team__arrow");

    arrowUp.removeClass("team__arrow_up");
    itemContainer.removeClass("active");
    items.height(0);
};

$(".team__item").click((e) => {
    const $this = $(e.currentTarget);
    const container = $this.closest(".team");
    const elemContainer = $this.closest(".team__item");

    if (elemContainer.hasClass("active")) {
        closeEveryItem(container);
    } else {
        closeEveryItem(container);
        openItem($this);
    }
})